# Use the official Golang image to create a build artifact.
# This is based on Debian and sets up Go for us.
FROM golang:1.21 as builder

# Set the working directory outside $GOPATH to enable Go modules
WORKDIR /src

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app for a smaller binary size
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o myapp ./main.go

# Use the official lightweight Alpine image for a lean production container.
# https://hub.docker.com/_/alpine
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM alpine:3.14

# Enable HTTPS
RUN apk --no-cache add ca-certificates

# Copy the binary to the production image from the builder stage.
COPY --from=builder /src/myapp /myapp

# Run the web service on container startup.
CMD ["/myapp"]
